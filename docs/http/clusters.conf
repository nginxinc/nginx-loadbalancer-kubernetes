# NGINX Loadbalancer for K8s HTTP configuration, for L7 load balancing
# Chris Akker, Apr 2023
# HTTP Proxy and load balancing
# MultiCluster Load Balancing with http split clients 0-100%
# Upstream servers managed by NLK Controller
# Nginx Key Value store for Split ratios
#
#### clusters.conf

# Define Key Value store, backup state file, timeout, and enable sync

keyval_zone zone=split:1m state=/var/lib/nginx/state/split.keyval timeout=365d sync;
keyval $host $split_level zone=split;

# Main Nginx Server Block for cafe.example.com, with TLS

server {
   listen 443 ssl;
   status_zone https://cafe.example.com;
   server_name cafe.example.com;
   
   ssl_certificate /etc/ssl/nginx/default.crt;  # self-signed for example only
   ssl_certificate_key /etc/ssl/nginx/default.key;
   
   location / {
   status_zone /;
   
   proxy_set_header Host $host;
   proxy_http_version 1.1;
   proxy_set_header   "Connection" "";
   proxy_pass https://$upstream;
   
   }

   location @health_check_cluster1_cafe {

   health_check interval=10 match=cafe;
   proxy_connect_timeout 2s;
   proxy_read_timeout 3s;
   proxy_set_header Host cafe.example.com;
   proxy_pass https://cluster1-https;
   }
 
   location @health_check_cluster2_cafe {

   health_check interval=10 match=cafe;
   proxy_connect_timeout 2s;
   proxy_read_timeout 3s;
   proxy_set_header Host cafe.example.com;
   proxy_pass https://cluster2-https;
   }
}

match cafe {
  status 200-399;
  }

# Cluster1 upstreams

upstream cluster1-https {
   zone cluster1-https 256k;
   least_time last_byte;
   keepalive 16;
   #servers managed by NLK Controller
   state /var/lib/nginx/state/cluster1-https.state; 
}

# Cluster2 upstreams

upstream cluster2-https {
   zone cluster2-https 256k;
   least_time last_byte;
   #servers managed by NLK Controller
   state /var/lib/nginx/state/cluster2-https.state; 
}

# HTTP Split Clients Configuration for Cluster1/Cluster2 ratios

split_clients $request_id $split0 { 
   * cluster2-https;
   }

split_clients $request_id $split1 { 
   1.0% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split5 {
   5.0% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split10 { 
   10% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split25 { 
   25% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split50 { 
   50% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split75 { 
   75% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split90 {
   90% cluster1-https;
   * cluster2-https;
   }
   
split_clients $request_id $split95 {
   95% cluster1-https;
   * cluster2-https;
   }
   
split_clients $request_id $split99 {
   99% cluster1-https;
   * cluster2-https;
   }

split_clients $request_id $split100 {
   * cluster1-https;
   }

map $split_level $upstream { 
   0 $split0;
   1.0 $split1;
   5.0 $split5;
   10 $split10;
   25 $split25;
   50 $split50;
   75 $split75;
   90 $split90;
   95 $split95;
   99 $split99;
   100 $split100;
   default $split50;
   }
